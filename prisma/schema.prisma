generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  entities    Entity[]
  tenants     Tenant[]
  users       User[]

  @@map("organizations")
}

model Entity {
  id             String           @id @default(cuid())
  name           String
  legalName      String?
  entityType     String?
  taxId          String?
  address        String?
  phone          String?
  email          String?
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  bankLedgers    BankLedger[]
  chartAccounts  ChartOfAccount[]
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  properties     Property[]
  userEntities   UserEntity[]
  vendors        Vendor[]
  users          User[]           @relation("UserEntities")

  @@map("entities")
}

model Property {
  id               String               @id @default(cuid())
  name             String
  address          String
  city             String
  state            String
  zipCode          String
  propertyType     String?
  totalUnits       Int                  @default(0)
  yearBuilt        Int?
  squareFeet       Int?
  description      String?
  entityId         String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  maintenanceReqs  MaintenanceRequest[]
  entity           Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  propertyExpenses PropertyExpense[]
  spaces           Space[]
  userProperties   UserProperty[]
  users            User[]               @relation("UserProperties")

  @@map("properties")
}

model Space {
  id              String               @id @default(cuid())
  unitNumber      String
  floor           Int?
  spaceType       String?
  bedrooms        Int?
  bathrooms       Decimal?
  squareFeet      Int?
  description     String?
  propertyId      String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  leases          Lease[]
  maintenanceReqs MaintenanceRequest[]
  property        Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, unitNumber])
  @@map("spaces")
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  passwordHash    String
  firstName       String
  lastName        String
  phone           String?
  role            UserRole             @default(TENANT)
  status          UserStatus           @default(PENDING)
  organizationId  String
  lastLoginAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  emailVerified   Boolean              @default(false)
  inviteExpires   DateTime?
  inviteToken     String?              @unique
  invitedBy       String?
  leases          Lease[]
  ledgerEntries   LedgerEntry[]
  maintenanceReqs MaintenanceRequest[]
  tenantProfile   Tenant?
  userEntities    UserEntity[]
  userProperties  UserProperty[]
  organization    Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entities        Entity[]             @relation("UserEntities")
  properties      Property[]           @relation("UserProperties")

  @@map("users")
}

model UserEntity {
  id        String   @id @default(cuid())
  userId    String
  entityId  String
  createdAt DateTime @default(now())
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@map("user_entities")
}

model UserProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("user_properties")
}

model Lease {
  id                String         @id @default(cuid())
  spaceId           String
  tenantId          String
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Decimal        @db.Decimal(10, 2)
  securityDeposit   Decimal        @db.Decimal(10, 2)
  status            LeaseStatus    @default(DRAFT)
  leaseTerms        String?
  nnnExpenses       Decimal?       @db.Decimal(10, 2)
  utilitiesIncluded Boolean        @default(false)
  petDeposit        Decimal?       @db.Decimal(10, 2)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  invoices          Invoice[]
  leaseRenewals     LeaseRenewal[]
  space             Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenant            User           @relation(fields: [tenantId], references: [id])
  rentIncreases     RentIncrease[]
  rentPayments      RentPayment[]

  @@map("leases")
}

model LeaseRenewal {
  id             String   @id @default(cuid())
  leaseId        String
  newEndDate     DateTime
  newMonthlyRent Decimal  @db.Decimal(10, 2)
  renewedAt      DateTime @default(now())
  notes          String?
  lease          Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("lease_renewals")
}

model RentIncrease {
  id              String   @id @default(cuid())
  leaseId         String
  previousRent    Decimal  @db.Decimal(10, 2)
  newRent         Decimal  @db.Decimal(10, 2)
  increaseAmount  Decimal  @db.Decimal(10, 2)
  increasePercent Decimal  @db.Decimal(5, 2)
  effectiveDate   DateTime
  reason          String?
  createdAt       DateTime @default(now())
  lease           Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_increases")
}

model ChartOfAccount {
  id            String        @id @default(cuid())
  entityId      String
  accountCode   String
  accountName   String
  accountType   String
  description   String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  entity        Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  ledgerEntries LedgerEntry[]

  @@unique([entityId, accountCode])
  @@map("chart_of_accounts")
}

model BankLedger {
  id             String        @id @default(cuid())
  entityId       String
  accountName    String
  accountNumber  String?
  bankName       String?
  accountType    String
  currentBalance Decimal       @default(0) @db.Decimal(15, 2)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  entity         Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  ledgerEntries  LedgerEntry[]

  @@map("bank_ledgers")
}

model LedgerEntry {
  id              String          @id @default(cuid())
  bankLedgerId    String
  chartAccountId  String
  transactionType TransactionType
  amount          Decimal         @db.Decimal(15, 2)
  description     String
  referenceNumber String?
  transactionDate DateTime
  reconciled      Boolean         @default(false)
  reconciledAt    DateTime?
  createdById     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bankLedger      BankLedger      @relation(fields: [bankLedgerId], references: [id])
  chartAccount    ChartOfAccount  @relation(fields: [chartAccountId], references: [id])
  createdBy       User            @relation(fields: [createdById], references: [id])

  @@map("ledger_entries")
}

model Invoice {
  id            String        @id @default(cuid())
  leaseId       String
  invoiceNumber String        @unique
  invoiceType   InvoiceType
  amount        Decimal       @db.Decimal(10, 2)
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  description   String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lease         Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@map("invoices")
}

model Payment {
  id              String        @id @default(cuid())
  invoiceId       String
  amount          Decimal       @db.Decimal(10, 2)
  paymentDate     DateTime
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)
  referenceNumber String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model RentPayment {
  id              String        @id @default(cuid())
  leaseId         String
  amount          Decimal       @db.Decimal(10, 2)
  paymentDate     DateTime
  periodStart     DateTime
  periodEnd       DateTime
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(COMPLETED)
  referenceNumber String?
  lateFee         Decimal?      @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lease           Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_payments")
}

model MaintenanceRequest {
  id            String                  @id @default(cuid())
  propertyId    String
  spaceId       String?
  tenantId      String
  title         String
  description   String
  priority      MaintenancePriority     @default(MEDIUM)
  status        MaintenanceStatus       @default(OPEN)
  estimatedCost Decimal?                @db.Decimal(10, 2)
  actualCost    Decimal?                @db.Decimal(10, 2)
  requestedAt   DateTime                @default(now())
  completedAt   DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  assignments   MaintenanceAssignment[]
  property      Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  space         Space?                  @relation(fields: [spaceId], references: [id])
  tenant        User                    @relation(fields: [tenantId], references: [id])

  @@map("maintenance_requests")
}

model Vendor {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  vendorType             String
  contactName            String?
  phone                  String?
  email                  String?
  address                String?
  licenseNumber          String?
  isInsured              Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  entityId               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  maintenanceAssignments MaintenanceAssignment[]
  entity                 Entity                  @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model MaintenanceAssignment {
  id                 String             @id @default(cuid())
  maintenanceReqId   String
  vendorId           String
  assignedAt         DateTime           @default(now())
  scheduledDate      DateTime?
  completedAt        DateTime?
  notes              String?
  cost               Decimal?           @db.Decimal(10, 2)
  maintenanceRequest MaintenanceRequest @relation(fields: [maintenanceReqId], references: [id], onDelete: Cascade)
  vendor             Vendor             @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("maintenance_assignments")
}

model PropertyExpense {
  id                String      @id @default(cuid())
  propertyId        String
  expenseType       ExpenseType
  amount            Decimal     @db.Decimal(10, 2)
  description       String
  expenseDate       DateTime
  vendor            String?
  invoiceNumber     String?
  allocateToTenants Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_expenses")
}

model Tenant {
  id                    String       @id @default(cuid())
  userId                String?      @unique
  firstName             String
  lastName              String
  email                 String
  phone                 String
  emergencyContactName  String?
  emergencyContactPhone String?
  dateOfBirth           DateTime?
  ssn                   String?
  isBusinessTenant      Boolean      @default(false)
  businessName          String?
  businessTaxId         String?
  previousLandlord      String?
  employerInfo          String?
  monthlyIncome         Decimal?     @db.Decimal(10, 2)
  organizationId        String
  isActive              Boolean      @default(true)
  notes                 String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id])
  user                  User?        @relation(fields: [userId], references: [id])

  @@map("tenants")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  ENTITY_MANAGER
  PROPERTY_MANAGER
  TENANT
  MAINTENANCE
  ACCOUNTANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceType {
  RENT
  UTILITIES
  NNN
  LATE_FEE
  MAINTENANCE
  OTHER
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum ExpenseType {
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAXES
  MANAGEMENT
  REPAIRS
  LANDSCAPING
  CLEANING
  OTHER
}
