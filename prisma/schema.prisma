generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  address              String?
  phone                String?
  email                String?
  website              String?
  logoUrl              String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  entities             Entity[]
  organizationSettings OrganizationSetting[]
  passwordPolicy       PasswordPolicy?
  tenants              Tenant[]
  userInvitations      UserInvitation[]
  users                User[]

  @@map("organizations")
}

model Entity {
  id             String         @id @default(cuid())
  name           String
  legalName      String?
  entityType     String?
  taxId          String?
  address        String?
  phone          String?
  email          String?
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true)
  isVerified     Boolean        @default(false)
  verifiedAt     DateTime?
  description    String?
  fax            String?
  website        String?
  bankLedgers    BankLedger[]
  chartAccounts  ChartAccount[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices       Invoice[]
  payments       Payment[]
  properties     Property[]
  userEntities   UserEntity[]
  vendors        Vendor[]
  ledgerEntries  LedgerEntry[]
  users          User[]         @relation("UserEntities")

  @@map("entities")
}

model Property {
  id                 String               @id @default(cuid())
  name               String
  address            String
  city               String
  state              String
  zipCode            String
  yearBuilt          Int?
  description        String?
  entityId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  currentMarketValue Decimal?             @db.Decimal(12, 2)
  lotSize            Int?
  purchasePrice      Decimal?             @db.Decimal(12, 2)
  squareFootage      Int?
  totalSpaces        Int                  @default(1)
  propertyType       PropertyType         @default(RESIDENTIAL)
  invoiceLineItems   InvoiceLineItem[]
  invoices           Invoice[]
  leases             Lease[]
  maintenanceReqs    MaintenanceRequest[]
  entity             Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  propertyExpenses   PropertyExpense[]
  images             PropertyImage[]
  spaces             Space[]
  userProperties     UserProperty[]
  users              User[]               @relation("UserProperties")

  @@index([entityId])
  @@index([propertyType])
  @@index([city, state])
  @@map("properties")
}

model Space {
  id               String               @id @default(cuid())
  bedrooms         Int?
  bathrooms        Decimal?             @db.Decimal(3, 1)
  description      String?
  propertyId       String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  amenities        String?
  deposit          Decimal?             @db.Decimal(10, 2)
  floorNumber      Int?
  name             String
  rent             Decimal?             @db.Decimal(10, 2)
  squareFootage    Int?
  status           SpaceStatus          @default(AVAILABLE)
  type             SpaceType            @default(UNIT)
  invoiceLineItems InvoiceLineItem[]
  invoices         Invoice[]
  leases           Lease[]
  maintenanceReqs  MaintenanceRequest[]
  spaceImages      SpaceImage[]
  property         Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([status])
  @@index([type])
  @@map("spaces")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  passwordHash           String
  firstName              String
  lastName               String
  phone                  String?
  role                   UserRole                @default(TENANT)
  status                 UserStatus              @default(PENDING)
  organizationId         String
  lastLoginAt            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  emailVerified          Boolean                 @default(false)
  inviteExpires          DateTime?
  inviteToken            String?                 @unique
  invitedBy              String?
  address                String?
  bio                    String?
  dateOfBirth            DateTime?
  department             String?
  emergencyContactName   String?
  emergencyContactPhone  String?
  phoneEmergency         String?
  phoneWork              String?
  profilePhotoUrl        String?
  startDate              DateTime?
  title                  String?
  invoiceAttachments     InvoiceAttachment[]     @relation("InvoiceAttachmentUploader")
  invoicesTenant         Invoice[]               @relation("InvoiceTenant")
  leases                 Lease[]
  ledgerEntries          LedgerEntry[]
  maintenanceAssignments MaintenanceAssignment[] @relation("MaintenanceAssignments")
  maintenanceReqs        MaintenanceRequest[]
  passwordHistory        PasswordHistory[]
  paymentAttachments     PaymentAttachment[]     @relation("PaymentAttachmentUploader")
  paymentsAsPayer        Payment[]               @relation("PaymentPayer")
  settingsAudits         SettingsAudit[]
  tenantProfile          Tenant?
  userEntities           UserEntity[]
  sentInvitations        UserInvitation[]        @relation("UserInvitations")
  userProperties         UserProperty[]
  userSettings           UserSetting[]
  organization           Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entities               Entity[]                @relation("UserEntities")
  properties             Property[]              @relation("UserProperties")
  importedStatements  BankStatement[]
  reconciliations     BankReconciliation[]
  receipts PaymentReceipt[] @relation("ReceiptGenerator")

  @@map("users")
}

model UserEntity {
  id        String   @id @default(cuid())
  userId    String
  entityId  String
  createdAt DateTime @default(now())
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@map("user_entities")
}

model UserProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("user_properties")
}

model UserInvitation {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  role           UserRole
  organizationId String
  invitedById    String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  entityIds      String[]         @default([])
  propertyIds    String[]         @default([])
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invitedBy      User             @relation("UserInvitations", fields: [invitedById], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@index([expiresAt])
  @@map("user_invitations")
}

model Lease {
  id                String         @id @default(cuid())
  spaceId           String
  tenantId          String
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Decimal        @db.Decimal(10, 2)
  securityDeposit   Decimal        @db.Decimal(10, 2)
  status            LeaseStatus    @default(ACTIVE)
  nnnExpenses       Decimal?       @db.Decimal(10, 2)
  utilitiesIncluded Boolean        @default(false)
  petDeposit        Decimal?       @db.Decimal(10, 2)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  propertyId        String
  renewalTerms      String?
  specialTerms      String?
  invoices          Invoice[]
  leaseRenewals     LeaseRenewal[]
  property          Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  space             Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tenant            User           @relation(fields: [tenantId], references: [id])
  rentIncreases     RentIncrease[]
  rentPayments      RentPayment[]

  @@index([spaceId])
  @@index([propertyId])
  @@index([tenantId])
  @@index([status])
  @@map("leases")
}

model LeaseRenewal {
  id             String   @id @default(cuid())
  leaseId        String
  newEndDate     DateTime
  newMonthlyRent Decimal  @db.Decimal(10, 2)
  renewedAt      DateTime @default(now())
  notes          String?
  lease          Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("lease_renewals")
}

model RentIncrease {
  id              String   @id @default(cuid())
  leaseId         String
  previousRent    Decimal  @db.Decimal(10, 2)
  newRent         Decimal  @db.Decimal(10, 2)
  increaseAmount  Decimal  @db.Decimal(10, 2)
  increasePercent Decimal  @db.Decimal(5, 2)
  effectiveDate   DateTime
  reason          String?
  createdAt       DateTime @default(now())
  lease           Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_increases")
}

model ChartAccount {
  id               String            @id @default(cuid())
  entityId         String
  accountCode      String
  accountName      String
  description      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accountType      AccountType
  parentId         String?
  entity           Entity            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  parent           ChartAccount?     @relation("ChartAccountParent", fields: [parentId], references: [id])
  children         ChartAccount[]    @relation("ChartAccountParent")
  invoiceLineItems InvoiceLineItem[]
  ledgerEntries    LedgerEntry[]
  bankLedgers   BankLedger[]   @relation("BankLedgerChartAccount")
  
  @@unique([entityId, accountCode])
  @@map("chart_of_accounts")
}

model BankLedger {
  id             String          @id @default(cuid())
  entityId       String
  accountName    String
  accountNumber  String?
  bankName       String?
  currentBalance Decimal         @default(0) @db.Decimal(15, 2)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accountType    BankAccountType
  routingNumber  String?
  notes          String?
  entity         Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  ledgerEntries  LedgerEntry[]
  Payment        Payment[]
  statements      BankStatement[]
  reconciliations BankReconciliation[]
  chartAccountId String
  chartAccount   ChartAccount @relation("BankLedgerChartAccount", fields: [chartAccountId], references: [id], onDelete: Cascade)

  @@map("bank_ledgers")
}

model LedgerEntry {
  id              String          @id @default(cuid())
  bankLedgerId    String
  transactionType TransactionType
  amount          Decimal         @db.Decimal(15, 2)
  description     String
  entityId        String?
  entryType       EntryType?      @default(MANUAL)
  debitAmount     Decimal?        @default(0) @db.Decimal(15, 2)
  creditAmount    Decimal?        @default(0) @db.Decimal(15, 2)
  referenceId     String?
  referenceNumber String?
  transactionDate DateTime
  reconciled      Boolean         @default(false)
  reconciledAt    DateTime?
  createdById     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  chartAccountId  String
  bankLedger      BankLedger      @relation(fields: [bankLedgerId], references: [id])
  chartAccount    ChartAccount    @relation(fields: [chartAccountId], references: [id])
  users           User            @relation(fields: [createdById], references: [id])
  entity          Entity?         @relation(fields: [entityId], references: [id])
  reconciliationMatch ReconciliationMatch?

  @@map("ledger_entries")
}

model Invoice {
  id                  String               @id @default(cuid())
  leaseId             String?
  invoiceNumber       String               @unique
  invoiceType         InvoiceType          @default(RENT)
  dueDate             DateTime
  status              InvoiceStatus        @default(DRAFT)
  description         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  balanceAmount       Decimal              @default(0.00) @db.Decimal(15, 2)
  customerEmail       String?
  customerName        String?
  discountAmount      Decimal              @default(0.00) @db.Decimal(15, 2)
  entityId            String
  internalNotes       String?
  isRecurring         Boolean              @default(false)
  issueDate           DateTime?
  lateFeeAmount       Decimal?             @db.Decimal(15, 2)
  lateFeeApplied      Boolean              @default(false)
  lateFeeDays         Int?
  memo                String?
  paidAmount          Decimal              @default(0.00) @db.Decimal(15, 2)
  parentInvoiceId     String?
  propertyId          String?
  recurringRule       String?
  spaceId             String?
  subtotal            Decimal              @default(0.00) @db.Decimal(15, 2)
  taxAmount           Decimal              @default(0.00) @db.Decimal(15, 2)
  tenantId            String?
  terms               String?
  totalAmount         Decimal              @default(0.00) @db.Decimal(15, 2)
  vendorId            String?
  attachments         InvoiceAttachment[]
  lineItems           InvoiceLineItem[]
  entity              Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  lease               Lease?               @relation(fields: [leaseId], references: [id])
  parentInvoice       Invoice?             @relation("InvoiceRecurring", fields: [parentInvoiceId], references: [id])
  childInvoices       Invoice[]            @relation("InvoiceRecurring")
  property            Property?            @relation(fields: [propertyId], references: [id])
  space               Space?               @relation(fields: [spaceId], references: [id])
  tenant              User?                @relation("InvoiceTenant", fields: [tenantId], references: [id])
  vendor              Vendor?              @relation(fields: [vendorId], references: [id])
  paymentApplications PaymentApplication[]

  @@map("invoices")
}

model InvoiceLineItem {
  id             String        @id @default(cuid())
  invoiceId      String
  lineNumber     Int
  description    String
  quantity       Decimal       @default(1.00) @db.Decimal(10, 2)
  unitPrice      Decimal       @db.Decimal(15, 2)
  lineTotal      Decimal       @db.Decimal(15, 2)
  propertyId     String?
  spaceId        String?
  itemCode       String?
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  chartAccountId String?
  chartAccount   ChartAccount? @relation(fields: [chartAccountId], references: [id])
  invoice        Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  property       Property?     @relation(fields: [propertyId], references: [id])
  space          Space?        @relation(fields: [spaceId], references: [id])

  @@unique([invoiceId, lineNumber])
  @@map("invoice_line_items")
}

model Payment {
  id                  String                  @id @default(cuid())
  amount              Decimal                 @db.Decimal(15, 2)
  paymentDate         DateTime                @default(now())
  paymentMethod       PaymentMethod
  status              PaymentStatus           @default(PENDING)
  referenceNumber     String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  bankLedgerId        String?
  depositDate         DateTime?
  depositId           String?
  entityId            String
  failureReason       String?
  internalNotes       String?
  isDeposited         Boolean                 @default(false)
  memo                String?
  nextRetryDate       DateTime?
  payerEmail          String?
  payerId             String?
  payerName           String
  paymentNumber       String                  @unique
  paymentType         PaymentType
  processingFee       Decimal?                @db.Decimal(15, 2)
  processingStatus    PaymentProcessingStatus @default(UNPROCESSED)
  receivedDate        DateTime?
  retryCount          Int                     @default(0)
  paymentApplications PaymentApplication[]
  attachments         PaymentAttachment[]
  bankLedger          BankLedger?             @relation(fields: [bankLedgerId], references: [id])
  entity              Entity                  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  payer               User?                   @relation("PaymentPayer", fields: [payerId], references: [id])
  receipts PaymentReceipt[]

  @@map("payments")
}

model RentPayment {
  id              String        @id @default(cuid())
  leaseId         String
  amount          Decimal       @db.Decimal(10, 2)
  paymentDate     DateTime
  periodStart     DateTime
  periodEnd       DateTime
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(COMPLETED)
  referenceNumber String?
  lateFee         Decimal?      @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lease           Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_payments")
}

model PaymentApplication {
  id            String   @id @default(cuid())
  paymentId     String
  invoiceId     String
  appliedAmount Decimal  @db.Decimal(15, 2)
  appliedDate   DateTime @default(now())
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  payment       Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([paymentId, invoiceId])
  @@map("payment_applications")
}

model MaintenanceRequest {
  id            String                  @id @default(cuid())
  propertyId    String
  spaceId       String?
  tenantId      String
  title         String
  description   String
  priority      MaintenancePriority     @default(MEDIUM)
  status        MaintenanceStatus       @default(OPEN)
  estimatedCost Decimal?                @db.Decimal(10, 2)
  actualCost    Decimal?                @db.Decimal(10, 2)
  requestedAt   DateTime                @default(now())
  completedAt   DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  assignments   MaintenanceAssignment[]
  property      Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  space         Space?                  @relation(fields: [spaceId], references: [id])
  tenant        User                    @relation(fields: [tenantId], references: [id])

  @@map("maintenance_requests")
}

model Vendor {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  vendorType             String
  contactName            String?
  phone                  String?
  email                  String?
  address                String?
  licenseNumber          String?
  isInsured              Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  entityId               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  invoices               Invoice[]
  maintenanceAssignments MaintenanceAssignment[]
  entity                 Entity                  @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model MaintenanceAssignment {
  id                 String             @id @default(cuid())
  maintenanceReqId   String
  vendorId           String?
  assignedAt         DateTime           @default(now())
  scheduledDate      DateTime?
  completedAt        DateTime?
  notes              String?
  cost               Decimal?           @db.Decimal(10, 2)
  assignedUserId     String?
  status             AssignmentStatus   @default(ASSIGNED)
  assignedUser       User?              @relation("MaintenanceAssignments", fields: [assignedUserId], references: [id])
  maintenanceRequest MaintenanceRequest @relation(fields: [maintenanceReqId], references: [id], onDelete: Cascade)
  vendor             Vendor?            @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("maintenance_assignments")
}

model PropertyExpense {
  id                String      @id @default(cuid())
  propertyId        String
  expenseType       ExpenseType
  amount            Decimal     @db.Decimal(10, 2)
  description       String
  expenseDate       DateTime
  vendor            String?
  invoiceNumber     String?
  allocateToTenants Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_expenses")
}

model Tenant {
  id                    String       @id @default(cuid())
  userId                String?      @unique
  firstName             String
  lastName              String
  email                 String
  phone                 String
  emergencyContactName  String?
  emergencyContactPhone String?
  dateOfBirth           DateTime?
  ssn                   String?
  isBusinessTenant      Boolean      @default(false)
  businessName          String?
  businessTaxId         String?
  previousLandlord      String?
  employerInfo          String?
  monthlyIncome         Decimal?     @db.Decimal(10, 2)
  organizationId        String
  isActive              Boolean      @default(true)
  notes                 String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id])
  user                  User?        @relation(fields: [userId], references: [id])

  @@map("tenants")
}

model UserSetting {
  id           String   @id @default(cuid())
  userId       String
  settingKey   String
  settingValue String
  category     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, settingKey])
  @@map("user_settings")
}

model OrganizationSetting {
  id             String       @id @default(cuid())
  organizationId String
  settingKey     String
  settingValue   String
  category       String
  isUserEditable Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, settingKey])
  @@map("organization_settings")
}

model SettingsAudit {
  id         String   @id @default(cuid())
  userId     String
  targetType String
  targetId   String
  settingKey String
  oldValue   String?
  newValue   String
  action     String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("settings_audit")
}

model PasswordPolicy {
  id              String       @id @default(cuid())
  organizationId  String       @unique
  minLength       Int          @default(8)
  requireUpper    Boolean      @default(true)
  requireLower    Boolean      @default(true)
  requireNumbers  Boolean      @default(true)
  requireSymbols  Boolean      @default(false)
  maxAge          Int?
  historyCount    Int          @default(5)
  lockoutAttempts Int          @default(5)
  lockoutDuration Int          @default(30)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("password_policies")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model PropertyImage {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  filename   String
  mimeType   String
  size       Int
  caption    String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@map("property_images")
}

model SpaceImage {
  id        String   @id @default(cuid())
  spaceId   String
  url       String
  filename  String
  mimeType  String
  size      Int
  caption   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId])
  @@map("space_images")
}

model InvoiceAttachment {
  id         String   @id @default(cuid())
  invoiceId  String
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  uploadedBy String?
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  uploader   User?    @relation("InvoiceAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("invoice_attachments")
}

model PaymentAttachment {
  id         String   @id @default(cuid())
  paymentId  String
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  uploadedBy String?
  createdAt  DateTime @default(now())
  payment    Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  uploader   User?    @relation("PaymentAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("payment_attachments")
}

model BankStatement {
  id                  String   @id @default(cuid())
  bankAccountId       String
  statementStartDate  DateTime
  statementEndDate    DateTime
  openingBalance      Decimal  @db.Decimal(15, 2)
  closingBalance      Decimal  @db.Decimal(15, 2)
  statementReference  String?
  importedById        String
  importedAt          DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  bankAccount         BankLedger         @relation(fields: [bankAccountId], references: [id])
  importedBy          User               @relation(fields: [importedById], references: [id])
  transactions        BankTransaction[]
  reconciliations     BankReconciliation[]

  @@map("bank_statements")
}

model BankTransaction {
  id               String          @id @default(cuid())
  bankStatementId  String
  transactionDate  DateTime
  amount           Decimal         @db.Decimal(15, 2)
  description      String
  referenceNumber  String?
  transactionType  String          // DEBIT, CREDIT
  runningBalance   Decimal?        @db.Decimal(15, 2)
  createdAt        DateTime        @default(now())

  bankStatement    BankStatement         @relation(fields: [bankStatementId], references: [id])
  reconciliationMatch ReconciliationMatch?

  @@map("bank_transactions")
}

model BankReconciliation {
  id                String   @id @default(cuid())
  bankAccountId     String
  bankStatementId   String
  reconciliationDate DateTime
  reconciledById    String
  status            String   @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, CANCELLED
  notes             String?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  bankAccount       BankLedger            @relation(fields: [bankAccountId], references: [id])
  bankStatement     BankStatement         @relation(fields: [bankStatementId], references: [id])
  reconciledBy      User                  @relation(fields: [reconciledById], references: [id])
  matches           ReconciliationMatch[]

  @@map("bank_reconciliations")
}

model ReconciliationMatch {
  id               String   @id @default(cuid())
  reconciliationId String
  ledgerEntryId    String   @unique  // Add @unique here
  bankTransactionId String  @unique  // Add @unique here
  matchNotes       String?
  createdAt        DateTime @default(now())

  reconciliation   BankReconciliation @relation(fields: [reconciliationId], references: [id])
  ledgerEntry      LedgerEntry        @relation(fields: [ledgerEntryId], references: [id])
  bankTransaction  BankTransaction    @relation(fields: [bankTransactionId], references: [id])

  @@unique([ledgerEntryId, bankTransactionId])
  @@map("reconciliation_matches")
}

model PaymentReceipt {
  id            String   @id @default(cuid())
  paymentId     String
  receiptNumber String   @unique
  receiptData   String   // JSON string containing receipt details
  format        String   @default("PDF") // PDF, HTML, etc.
  generatedBy   String
  emailSentTo   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  payment       Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  generator     User     @relation("ReceiptGenerator", fields: [generatedBy], references: [id])

  @@map("payment_receipts")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  ENTITY_MANAGER
  PROPERTY_MANAGER
  TENANT
  MAINTENANCE
  ACCOUNTANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  INDUSTRIAL
  RETAIL
  OFFICE
  WAREHOUSE
  LAND
}

enum SpaceType {
  UNIT
  APARTMENT
  OFFICE
  RETAIL
  WAREHOUSE
  PARKING
  STORAGE
  COMMON_AREA
  AMENITY
  OTHER
}

enum SpaceStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  UNAVAILABLE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  VIEWED
  PARTIAL_PAYMENT
  VOID
}

enum InvoiceType {
  RENT
  LATE_FEE
  UTILITY
  MAINTENANCE
  PARKING
  PET_FEE
  SECURITY_DEPOSIT
  OTHER
  VENDOR_BILL
  NNN
}

enum PaymentType {
  CASH
  CHECK
  ACH
  CREDIT_CARD
  BANK_TRANSFER
  MONEY_ORDER
  WIRE_TRANSFER
}

enum PaymentMethod {
  ONLINE
  MANUAL
  AUTO_DEBIT
  MAIL
  IN_PERSON
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PROCESSING
  CANCELLED
}

enum PaymentProcessingStatus {
  UNPROCESSED
  PROCESSING
  CLEARED
  BOUNCED
  DISPUTED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum ExpenseType {
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAXES
  MANAGEMENT
  REPAIRS
  LANDSCAPING
  CLEANING
  OTHER
}

enum InvitationStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum BankAccountType {
  CHECKING
  SAVINGS
  MONEY_MARKET
  CD
  INVESTMENT
}

enum EntryType {
  MANUAL
  AUTOMATIC
  PAYMENT
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  RECONCILIATION
}
