generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entities             Entity[]
  tenants              Tenant[]
  users                User[]
  userInvitations      UserInvitation[]
  organizationSettings OrganizationSetting[]
  passwordPolicy       PasswordPolicy?

  @@map("organizations")
}

model Entity {
  id             String    @id @default(cuid())
  name           String
  legalName      String?
  entityType     String?
  taxId          String?
  address        String?
  phone          String?
  email          String?
  fax            String?
  website        String?
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)
  isVerified     Boolean   @default(false)
  verifiedAt     DateTime?
  description    String?

  bankLedgers   BankLedger[]
  chartAccounts ChartAccount[]
  organization  Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  properties    Property[]
  userEntities  UserEntity[]
  vendors       Vendor[]
  users         User[]           @relation("UserEntities")
  // Enhanced Relations
  invoices      Invoice[]
  payments      Payment[]

  @@map("entities")
}

model Property {
  id           String       @id @default(cuid())
  name         String
  address      String
  city         String
  state        String
  zipCode      String
  propertyType PropertyType @default(RESIDENTIAL)
  description  String?
  totalSpaces  Int          @default(1)

  // Financial Fields
  purchasePrice      Decimal? @db.Decimal(12, 2)
  currentMarketValue Decimal? @db.Decimal(12, 2)

  // Property Details
  yearBuilt     Int?
  squareFootage Int?
  lotSize       Int?

  entityId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maintenanceReqs  MaintenanceRequest[]
  entity           Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  propertyExpenses PropertyExpense[]
  spaces           Space[]
  leases           Lease[]
  userProperties   UserProperty[]
  images           PropertyImage[]
  users            User[]               @relation("UserProperties")
  // Enhanced Relations
  invoices         Invoice[]
  invoiceLineItems InvoiceLineItem[]

  @@index([entityId])
  @@index([propertyType])
  @@index([city, state])
  @@map("properties")
}

model Space {
  id     String      @id @default(cuid())
  name   String // Unit identifier (e.g., "Unit 2A")
  type   SpaceType   @default(UNIT)
  status SpaceStatus @default(AVAILABLE)

  // Space Details
  squareFootage Int?
  bedrooms      Int?
  bathrooms     Decimal? @db.Decimal(3, 1)
  rent          Decimal? @db.Decimal(10, 2)
  deposit       Decimal? @db.Decimal(10, 2)
  description   String?
  amenities     String? // JSON string of amenities
  floorNumber   Int?

  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  leases           Lease[]
  maintenanceReqs  MaintenanceRequest[]
  property         Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  spaceImages      SpaceImage[]
  // Enhanced Relations
  invoices         Invoice[]
  invoiceLineItems InvoiceLineItem[]

  @@index([propertyId])
  @@index([status])
  @@index([type])
  @@map("spaces")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  passwordHash   String
  firstName      String
  lastName       String
  phone          String?
  role           UserRole   @default(TENANT)
  status         UserStatus @default(PENDING)
  organizationId String
  lastLoginAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  emailVerified  Boolean    @default(false)
  inviteExpires  DateTime?
  inviteToken    String?    @unique
  invitedBy      String?

  // Profile fields
  title                 String?
  department            String?
  bio                   String?
  profilePhotoUrl       String?
  phoneWork             String?
  phoneEmergency        String?
  address               String?
  dateOfBirth           DateTime?
  emergencyContactName  String?
  emergencyContactPhone String?
  startDate             DateTime?

  leases                 Lease[]
  ledgerEntries          LedgerEntry[]
  maintenanceReqs        MaintenanceRequest[]
  tenantProfile          Tenant?
  userEntities           UserEntity[]
  userProperties         UserProperty[]
  userSettings           UserSetting[]
  settingsAudits         SettingsAudit[]
  passwordHistory        PasswordHistory[]
  maintenanceAssignments MaintenanceAssignment[] @relation("MaintenanceAssignments")

  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entities        Entity[]         @relation("UserEntities")
  properties      Property[]       @relation("UserProperties")
  sentInvitations UserInvitation[] @relation("UserInvitations")

  // Enhanced Relations for Invoices & Payments
  invoicesTenant     Invoice[]           @relation("InvoiceTenant")
  paymentsAsPayer    Payment[]           @relation("PaymentPayer")
  invoiceAttachments InvoiceAttachment[] @relation("InvoiceAttachmentUploader")
  paymentAttachments PaymentAttachment[] @relation("PaymentAttachmentUploader")

  @@map("users")
}

model UserEntity {
  id        String   @id @default(cuid())
  userId    String
  entityId  String
  createdAt DateTime @default(now())

  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@map("user_entities")
}

model UserProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("user_properties")
}

model UserInvitation {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  role           UserRole
  organizationId String
  invitedById    String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  entityIds      String[]         @default([])
  propertyIds    String[]         @default([])
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User         @relation("UserInvitations", fields: [invitedById], references: [id])

  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@index([expiresAt])
  @@map("user_invitations")
}

model Lease {
  id                String      @id @default(cuid())
  spaceId           String
  propertyId        String
  tenantId          String
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Decimal     @db.Decimal(10, 2)
  securityDeposit   Decimal     @db.Decimal(10, 2)
  status            LeaseStatus @default(ACTIVE)
  renewalTerms      String?
  specialTerms      String?
  nnnExpenses       Decimal?    @db.Decimal(10, 2)
  utilitiesIncluded Boolean     @default(false)
  petDeposit        Decimal?    @db.Decimal(10, 2)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  invoices      Invoice[]
  leaseRenewals LeaseRenewal[]
  space         Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  property      Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant        User           @relation(fields: [tenantId], references: [id])
  rentIncreases RentIncrease[]
  rentPayments  RentPayment[]

  @@index([spaceId])
  @@index([propertyId])
  @@index([tenantId])
  @@index([status])
  @@map("leases")
}

model LeaseRenewal {
  id             String   @id @default(cuid())
  leaseId        String
  newEndDate     DateTime
  newMonthlyRent Decimal  @db.Decimal(10, 2)
  renewedAt      DateTime @default(now())
  notes          String?

  lease Lease @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("lease_renewals")
}

model RentIncrease {
  id              String   @id @default(cuid())
  leaseId         String
  previousRent    Decimal  @db.Decimal(10, 2)
  newRent         Decimal  @db.Decimal(10, 2)
  increaseAmount  Decimal  @db.Decimal(10, 2)
  increasePercent Decimal  @db.Decimal(5, 2)
  effectiveDate   DateTime
  reason          String?
  createdAt       DateTime @default(now())

  lease Lease @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_increases")
}

model ChartAccount {
  id          String   @id @default(cuid())
  entityId    String
  accountCode String
  accountName String
  accountType AccountType
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entity           Entity            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  ledgerEntries    LedgerEntry[]
  invoiceLineItems InvoiceLineItem[]

  @@unique([entityId, accountCode])
  @@map("chart_of_accounts")
}

model BankLedger {
  id             String   @id @default(cuid())
  entityId       String
  accountName    String
  accountNumber  String?
  bankName       String?
  accountType    String
  currentBalance Decimal  @default(0) @db.Decimal(15, 2)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  entity        Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  ledgerEntries LedgerEntry[]
  Payment       Payment[]

  @@map("bank_ledgers")
}

model LedgerEntry {
  id               String          @id @default(cuid())
  bankLedgerId     String
  chartAccountId   String
  transactionType  TransactionType
  amount           Decimal         @db.Decimal(15, 2)
  description      String
  referenceNumber  String?
  transactionDate  DateTime
  reconciled       Boolean         @default(false)
  reconciledAt     DateTime?
  createdById      String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  bankLedger     BankLedger     @relation(fields: [bankLedgerId], references: [id])
  chartAccount   ChartAccount @relation(fields: [chartAccountId], references: [id]) 
  createdBy      User           @relation(fields: [createdById], references: [id])

  @@map("ledger_entries")
}

model Invoice {
  id            String      @id @default(cuid())
  entityId      String
  invoiceNumber String      @unique
  invoiceType   InvoiceType @default(RENT)

  // Customer Information
  tenantId      String?
  vendorId      String?
  customerName  String? // For non-tenant invoices
  customerEmail String?

  // Property Information
  propertyId String?
  spaceId    String?
  leaseId    String?

  // Invoice Details
  issueDate DateTime?
  dueDate   DateTime

  // Financial Information
  subtotal       Decimal @default(0.00) @db.Decimal(15, 2)
  taxAmount      Decimal @default(0.00) @db.Decimal(15, 2)
  discountAmount Decimal @default(0.00) @db.Decimal(15, 2)
  totalAmount    Decimal @default(0.00) @db.Decimal(15, 2)
  paidAmount     Decimal @default(0.00) @db.Decimal(15, 2)
  balanceAmount  Decimal @default(0.00) @db.Decimal(15, 2)

  // Status & Processing
  status InvoiceStatus @default(DRAFT)

  // Additional Information
  description   String?
  terms         String?
  memo          String?
  internalNotes String?

  // Recurring Invoice
  isRecurring     Boolean @default(false)
  parentInvoiceId String?
  recurringRule   String? // JSON string for recurrence rules

  // Late Fees
  lateFeeApplied Boolean  @default(false)
  lateFeeDays    Int?
  lateFeeAmount  Decimal? @db.Decimal(15, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  entity   Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tenant   User?     @relation("InvoiceTenant", fields: [tenantId], references: [id])
  vendor   Vendor?   @relation(fields: [vendorId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])
  space    Space?    @relation(fields: [spaceId], references: [id])
  lease    Lease?    @relation(fields: [leaseId], references: [id])

  // Enhanced Relations
  lineItems           InvoiceLineItem[]
  paymentApplications PaymentApplication[]
  attachments         InvoiceAttachment[]
  parentInvoice       Invoice?             @relation("InvoiceRecurring", fields: [parentInvoiceId], references: [id])
  childInvoices       Invoice[]            @relation("InvoiceRecurring")

  @@map("invoices")
}

// ===== INVOICE LINE ITEMS =====
model InvoiceLineItem {
  id         String @id @default(cuid())
  invoiceId  String
  lineNumber Int

  // Item Details
  description String
  quantity    Decimal @default(1.00) @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(15, 2)
  lineTotal   Decimal @db.Decimal(15, 2) // quantity * unitPrice

  // Accounting
  chartAccountId String?

  // Property/Unit Allocation
  propertyId String?
  spaceId    String?

  // Additional Information
  itemCode  String?
  startDate DateTime? // For rent periods
  endDate   DateTime? // For rent periods

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoice        Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  chartAccount   ChartAccount?   @relation(fields: [chartAccountId], references: [id])
  property       Property?       @relation(fields: [propertyId], references: [id])
  space          Space?          @relation(fields: [spaceId], references: [id])

  @@unique([invoiceId, lineNumber])
  @@map("invoice_line_items")
}

// ===== ENHANCED PAYMENTS MODEL =====
model Payment {
  id            String @id @default(cuid())
  entityId      String
  paymentNumber String @unique

  // Payment Source
  paymentType   PaymentType
  paymentMethod PaymentMethod

  // Payer Information
  payerId    String? // User ID (tenant)
  payerName  String
  payerEmail String?

  // Payment Details
  amount       Decimal   @db.Decimal(15, 2)
  paymentDate  DateTime  @default(now())
  receivedDate DateTime?

  // Bank Information
  bankLedgerId    String?
  referenceNumber String? // Check number, transaction ID

  // Status & Processing
  status           PaymentStatus           @default(PENDING)
  processingStatus PaymentProcessingStatus @default(UNPROCESSED)

  // Fees
  processingFee Decimal? @db.Decimal(15, 2)

  // Failure Information
  failureReason String?
  retryCount    Int       @default(0)
  nextRetryDate DateTime?

  // Deposit Information
  depositId   String?
  isDeposited Boolean   @default(false)
  depositDate DateTime?

  // Additional Information
  memo          String?
  internalNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  entity     Entity      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  payer      User?       @relation("PaymentPayer", fields: [payerId], references: [id])
  bankLedger BankLedger? @relation(fields: [bankLedgerId], references: [id])

  // Enhanced Relations
  paymentApplications PaymentApplication[]
  attachments         PaymentAttachment[]

  @@map("payments")
}

model RentPayment {
  id              String        @id @default(cuid())
  leaseId         String
  amount          Decimal       @db.Decimal(10, 2)
  paymentDate     DateTime
  periodStart     DateTime
  periodEnd       DateTime
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(COMPLETED)
  referenceNumber String?
  lateFee         Decimal?      @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  lease Lease @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rent_payments")
}

// ===== PAYMENT APPLICATION (APPLICATION TO INVOICES) =====
model PaymentApplication {
  id        String @id @default(cuid())
  paymentId String
  invoiceId String

  appliedAmount Decimal  @db.Decimal(15, 2)
  appliedDate   DateTime @default(now())

  // Additional Information
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([paymentId, invoiceId])
  @@map("payment_applications")
}

model MaintenanceRequest {
  id            String              @id @default(cuid())
  propertyId    String
  spaceId       String?
  tenantId      String
  title         String
  description   String
  priority      MaintenancePriority @default(MEDIUM)
  status        MaintenanceStatus   @default(OPEN)
  estimatedCost Decimal?            @db.Decimal(10, 2)
  actualCost    Decimal?            @db.Decimal(10, 2)
  requestedAt   DateTime            @default(now())
  completedAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  assignments MaintenanceAssignment[]
  property    Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  space       Space?                  @relation(fields: [spaceId], references: [id])
  tenant      User                    @relation(fields: [tenantId], references: [id])

  @@map("maintenance_requests")
}

model Vendor {
  id            String   @id @default(cuid())
  name          String
  description   String?
  vendorType    String
  contactName   String?
  phone         String?
  email         String?
  address       String?
  licenseNumber String?
  isInsured     Boolean  @default(false)
  isActive      Boolean  @default(true)
  entityId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  maintenanceAssignments MaintenanceAssignment[]
  invoices               Invoice[]
  entity                 Entity                  @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model MaintenanceAssignment {
  id               String           @id @default(cuid())
  maintenanceReqId String
  vendorId         String?
  assignedUserId   String?
  assignedAt       DateTime         @default(now())
  scheduledDate    DateTime?
  completedAt      DateTime?
  notes            String?
  cost             Decimal?         @db.Decimal(10, 2)
  status           AssignmentStatus @default(ASSIGNED)

  maintenanceRequest MaintenanceRequest @relation(fields: [maintenanceReqId], references: [id], onDelete: Cascade)
  vendor             Vendor?            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  assignedUser       User?              @relation("MaintenanceAssignments", fields: [assignedUserId], references: [id])

  @@map("maintenance_assignments")
}

model PropertyExpense {
  id                String      @id @default(cuid())
  propertyId        String
  expenseType       ExpenseType
  amount            Decimal     @db.Decimal(10, 2)
  description       String
  expenseDate       DateTime
  vendor            String?
  invoiceNumber     String?
  allocateToTenants Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_expenses")
}

model Tenant {
  id                    String    @id @default(cuid())
  userId                String?   @unique
  firstName             String
  lastName              String
  email                 String
  phone                 String
  emergencyContactName  String?
  emergencyContactPhone String?
  dateOfBirth           DateTime?
  ssn                   String?
  isBusinessTenant      Boolean   @default(false)
  businessName          String?
  businessTaxId         String?
  previousLandlord      String?
  employerInfo          String?
  monthlyIncome         Decimal?  @db.Decimal(10, 2)
  organizationId        String
  isActive              Boolean   @default(true)
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@map("tenants")
}

model UserSetting {
  id           String   @id @default(cuid())
  userId       String
  settingKey   String
  settingValue String
  category     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, settingKey])
  @@map("user_settings")
}

model OrganizationSetting {
  id             String   @id @default(cuid())
  organizationId String
  settingKey     String
  settingValue   String
  category       String
  isUserEditable Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, settingKey])
  @@map("organization_settings")
}

model SettingsAudit {
  id         String   @id @default(cuid())
  userId     String
  targetType String
  targetId   String
  settingKey String
  oldValue   String?
  newValue   String
  action     String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("settings_audit")
}

model PasswordPolicy {
  id              String   @id @default(cuid())
  organizationId  String   @unique
  minLength       Int      @default(8)
  requireUpper    Boolean  @default(true)
  requireLower    Boolean  @default(true)
  requireNumbers  Boolean  @default(true)
  requireSymbols  Boolean  @default(false)
  maxAge          Int?
  historyCount    Int      @default(5)
  lockoutAttempts Int      @default(5)
  lockoutDuration Int      @default(30)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("password_policies")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model PropertyImage {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  filename   String
  mimeType   String
  size       Int
  caption    String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@map("property_images")
}

model SpaceImage {
  id        String   @id @default(cuid())
  spaceId   String
  url       String
  filename  String
  mimeType  String
  size      Int
  caption   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId])
  @@map("space_images")
}

// ===== ATTACHMENTS =====
model InvoiceAttachment {
  id         String  @id @default(cuid())
  invoiceId  String
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  uploadedBy String?

  createdAt DateTime @default(now())

  // Relations
  invoice  Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  uploader User?   @relation("InvoiceAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("invoice_attachments")
}

model PaymentAttachment {
  id         String  @id @default(cuid())
  paymentId  String
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  uploadedBy String?

  createdAt DateTime @default(now())

  // Relations
  payment  Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  uploader User?   @relation("PaymentAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("payment_attachments")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  ENTITY_MANAGER
  PROPERTY_MANAGER
  TENANT
  MAINTENANCE
  ACCOUNTANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  INDUSTRIAL
  RETAIL
  OFFICE
  WAREHOUSE
  LAND
}

enum SpaceType {
  UNIT
  APARTMENT
  OFFICE
  RETAIL
  WAREHOUSE
  PARKING
  STORAGE
  COMMON_AREA
  AMENITY
  OTHER
}

enum SpaceStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  UNAVAILABLE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIAL_PAYMENT
  PAID
  OVERDUE
  VOID
  CANCELLED
}

enum InvoiceType {
  RENT
  LATE_FEE
  UTILITY
  MAINTENANCE
  PARKING
  PET_FEE
  SECURITY_DEPOSIT
  OTHER
  VENDOR_BILL
  NNN
}

enum PaymentType {
  CASH
  CHECK
  ACH
  CREDIT_CARD
  BANK_TRANSFER
  MONEY_ORDER
  WIRE_TRANSFER
}

enum PaymentMethod {
  ONLINE
  MANUAL
  AUTO_DEBIT
  MAIL
  IN_PERSON
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentProcessingStatus {
  UNPROCESSED
  PROCESSING
  CLEARED
  BOUNCED
  DISPUTED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum ExpenseType {
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAXES
  MANAGEMENT
  REPAIRS
  LANDSCAPING
  CLEANING
  OTHER
}

enum InvitationStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}